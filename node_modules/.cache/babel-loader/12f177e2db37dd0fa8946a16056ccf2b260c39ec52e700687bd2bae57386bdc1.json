{"ast":null,"code":"import React,{useState,useEffect}from'react';import{AptosClient,FaucetClient,AptosAccount,HexString}from'aptos';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const client=new AptosClient(\"https://fullnode.devnet.aptoslabs.com\");const faucetClient=new FaucetClient(\"https://faucet.devnet.aptoslabs.com\",\"https://fullnode.devnet.aptoslabs.com\");const HealthCare=()=>{const[account,setAccount]=useState(null);const[balance,setBalance]=useState(null);const[patientID,setPatientID]=useState('');const[diagnosis,setDiagnosis]=useState('');const[treatment,setTreatment]=useState('');const[transactionHash,setTransactionHash]=useState(null);const[patientRecords,setPatientRecords]=useState([]);useEffect(()=>{const createAccount=async()=>{const aptosAccount=new AptosAccount();setAccount(aptosAccount);await faucetClient.fundAccount(aptosAccount.address(),100000000);const resources=await client.getAccountResources(aptosAccount.address());const accountResource=resources.find(r=>r.type===\"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\");setBalance(accountResource.data.coin.value);};createAccount();},[]);const addRecord=async()=>{try{const payload={type:\"entry_function_payload\",function:`${account.address()}::HealthcareRecords::add_record`,arguments:[patientID,diagnosis,treatment],type_arguments:[]};const txnRequest=await client.generateTransaction(account.address(),payload);const signedTxn=await client.signTransaction(account,txnRequest);const transactionRes=await client.submitTransaction(signedTxn);setTransactionHash(transactionRes.hash);fetchPatientRecords();// Fetch updated records after adding\n}catch(error){console.error(\"Error adding record\",error);}};const fetchPatientRecords=async()=>{try{const data=await client.getAccountResources(account.address());setPatientRecords(data);// Assuming that healthcare records are stored in account resources.\n}catch(error){console.error(\"Error fetching patient records\",error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h1\",{className:\"title\",children:[\"AptoMed\",/*#__PURE__*/_jsx(\"br\",{})]}),account&&/*#__PURE__*/_jsxs(\"p\",{className:\"account-info\",children:[\"Account Address: \",account.address().toString()]}),balance&&/*#__PURE__*/_jsxs(\"p\",{className:\"account-info\",children:[\"Account Balance: \",balance/1000000,\" APT\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Fetch Patient Records\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",placeholder:\"Enter Patient ID\",value:patientID,onChange:e=>setPatientID(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"action-button\",onClick:fetchPatientRecords,children:\"Fetch Records\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Add Patient Record\"}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",placeholder:\"Diagnosis\",value:diagnosis,onChange:e=>setDiagnosis(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{className:\"input-field\",type:\"text\",placeholder:\"Treatment\",value:treatment,onChange:e=>setTreatment(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{className:\"action-button\",onClick:addRecord,children:\"Add Record\"})]}),transactionHash&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Transaction Hash: \",transactionHash]}),/*#__PURE__*/_jsxs(\"div\",{className:\"records-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Patient Records\"}),patientRecords.map((record,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"record-card\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Record ID: \",record.data.recordID]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Diagnosis: \",record.data.diagnosis]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Treatment: \",record.data.treatment]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Timestamp: \",new Date(record.data.timestamp*1000).toLocaleString()]})]},index))]})]});};export default HealthCare;","map":{"version":3,"names":["React","useState","useEffect","AptosClient","FaucetClient","AptosAccount","HexString","jsx","_jsx","jsxs","_jsxs","client","faucetClient","HealthCare","account","setAccount","balance","setBalance","patientID","setPatientID","diagnosis","setDiagnosis","treatment","setTreatment","transactionHash","setTransactionHash","patientRecords","setPatientRecords","createAccount","aptosAccount","fundAccount","address","resources","getAccountResources","accountResource","find","r","type","data","coin","value","addRecord","payload","function","arguments","type_arguments","txnRequest","generateTransaction","signedTxn","signTransaction","transactionRes","submitTransaction","hash","fetchPatientRecords","error","console","className","children","toString","placeholder","onChange","e","target","onClick","map","record","index","recordID","Date","timestamp","toLocaleString"],"sources":["C:/Users/Sonam Kumari/OneDrive/Desktop/AptoMed/src/Healthcare.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport { AptosClient, FaucetClient, AptosAccount, HexString } from 'aptos';\r\n\r\nconst client = new AptosClient(\"https://fullnode.devnet.aptoslabs.com\");\r\nconst faucetClient = new FaucetClient(\r\n  \"https://faucet.devnet.aptoslabs.com\", \r\n  \"https://fullnode.devnet.aptoslabs.com\" \r\n);\r\n\r\nconst HealthCare = () => {\r\n  const [account, setAccount] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [patientID, setPatientID] = useState('');\r\n  const [diagnosis, setDiagnosis] = useState('');\r\n  const [treatment, setTreatment] = useState('');\r\n  const [transactionHash, setTransactionHash] = useState(null);\r\n  const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const createAccount = async () => {\r\n      const aptosAccount = new AptosAccount();\r\n      setAccount(aptosAccount);\r\n\r\n      await faucetClient.fundAccount(aptosAccount.address(), 100_000_000); \r\n      const resources = await client.getAccountResources(aptosAccount.address());\r\n      const accountResource = resources.find((r) => r.type === \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\");\r\n      setBalance(accountResource.data.coin.value);\r\n    };\r\n\r\n    createAccount();\r\n  }, []);\r\n\r\n  const addRecord = async () => {\r\n    try {\r\n      const payload = {\r\n        type: \"entry_function_payload\",\r\n        function: `${account.address()}::HealthcareRecords::add_record`,\r\n        arguments: [patientID, diagnosis, treatment],\r\n        type_arguments: [],\r\n      };\r\n\r\n      const txnRequest = await client.generateTransaction(account.address(), payload);\r\n      const signedTxn = await client.signTransaction(account, txnRequest);\r\n      const transactionRes = await client.submitTransaction(signedTxn);\r\n\r\n      setTransactionHash(transactionRes.hash);\r\n      fetchPatientRecords(); // Fetch updated records after adding\r\n    } catch (error) {\r\n      console.error(\"Error adding record\", error);\r\n    }\r\n  };\r\n\r\n  const fetchPatientRecords = async () => {\r\n    try {\r\n      const data = await client.getAccountResources(account.address());\r\n      setPatientRecords(data); // Assuming that healthcare records are stored in account resources.\r\n    } catch (error) {\r\n      console.error(\"Error fetching patient records\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1 className=\"title\">AptoMed<br></br></h1>\r\n      {account && <p className='account-info'>Account Address: {account.address().toString()}</p>}\r\n      {balance && <p className='account-info'>Account Balance: {balance / 1000000} APT</p>}\r\n\r\n      <div className='form-section'>\r\n        <h2>Fetch Patient Records</h2>\r\n        <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)} />\r\n        <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n      </div>\r\n\r\n      <div className=\"form-section\">\r\n        <h2>Add Patient Record</h2>\r\n        <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\r\n        <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)} />\r\n        <button className='action-button' onClick={addRecord}>Add Record</button>\r\n      </div>\r\n\r\n      {transactionHash && (\r\n        <p>Transaction Hash: {transactionHash}</p>\r\n      )}\r\n\r\n      <div className='records-section'>\r\n        <h2>Patient Records</h2>\r\n        {patientRecords.map((record, index) => (\r\n          <div key={index} className='record-card'>\r\n            <p>Record ID: {record.data.recordID}</p>\r\n            <p>Diagnosis: {record.data.diagnosis}</p>\r\n            <p>Treatment: {record.data.treatment}</p>\r\n            <p>Timestamp: {new Date(record.data.timestamp * 1000).toLocaleString()}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthCare;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}