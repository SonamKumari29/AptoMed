{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sonam Kumari\\\\OneDrive\\\\Desktop\\\\AptoMed\\\\src\\\\Healthcare.js\",\n  _s = $RefreshSig$();\n// import React, {useState, useEffect} from 'react';\n// import {ethers} from 'ethers';\n\n// const HealthCare = () => {\n//     const [provider, setProvider] = useState(null);\n//     const [signer, setSigner] = useState(null);\n//     const [contract, setContract] = useState(null);\n//     const [account, setAccount] = useState(null);\n//     const [isOwner, setIsOwner] = useState(null);\n//     const [patientID, setPatientID] = useState('');\n//     const [diagnosis, setDiagnosis] = useState('');\n//     const [treatment, setTreatment] = useState('');\n//     const [patientRecords, setPatientRecords] = useState([]);\n\n//     const [providerAddress, setProviderAddress] = useState(\"\");\n//     const contractAddress = \"0x6348995a1972d426b6a7c053fd17a86b243c9d2b\";\n\n//     const contractABI = [\n//         {\n//             \"inputs\": [],\n//             \"stateMutability\": \"nonpayable\",\n//             \"type\": \"constructor\"\n//         },\n//         {\n//             \"inputs\": [\n//                 {\n//                     \"internalType\": \"uint256\",\n//                     \"name\": \"patientID\",\n//                     \"type\": \"uint256\"\n//                 },\n//                 {\n//                     \"internalType\": \"string\",\n//                     \"name\": \"patientName\",\n//                     \"type\": \"string\"\n//                 },\n//                 {\n//                     \"internalType\": \"string\",\n//                     \"name\": \"diagnosis\",\n//                     \"type\": \"string\"\n//                 },\n//                 {\n//                     \"internalType\": \"string\",\n//                     \"name\": \"treatment\",\n//                     \"type\": \"string\"\n//                 }\n//             ],\n//             \"name\": \"addRecord\",\n//             \"outputs\": [],\n//             \"stateMutability\": \"nonpayable\",\n//             \"type\": \"function\"\n//         },\n//         {\n//             \"inputs\": [\n//                 {\n//                     \"internalType\": \"address\",\n//                     \"name\": \"provider\",\n//                     \"type\": \"address\"\n//                 }\n//             ],\n//             \"name\": \"authorizeProvider\",\n//             \"outputs\": [],\n//             \"stateMutability\": \"nonpayable\",\n//             \"type\": \"function\"\n//         },\n//         {\n//             \"inputs\": [],\n//             \"name\": \"getOwner\",\n//             \"outputs\": [\n//                 {\n//                     \"internalType\": \"address\",\n//                     \"name\": \"\",\n//                     \"type\": \"address\"\n//                 }\n//             ],\n//             \"stateMutability\": \"view\",\n//             \"type\": \"function\"\n//         },\n//         {\n//             \"inputs\": [\n//                 {\n//                     \"internalType\": \"uint256\",\n//                     \"name\": \"patientID\",\n//                     \"type\": \"uint256\"\n//                 }\n//             ],\n//             \"name\": \"getPatientRecords\",\n//             \"outputs\": [\n//                 {\n//                     \"components\": [\n//                         {\n//                             \"internalType\": \"uint256\",\n//                             \"name\": \"recordID\",\n//                             \"type\": \"uint256\"\n//                         },\n//                         {\n//                             \"internalType\": \"string\",\n//                             \"name\": \"patientName\",\n//                             \"type\": \"string\"\n//                         },\n//                         {\n//                             \"internalType\": \"string\",\n//                             \"name\": \"diagnosis\",\n//                             \"type\": \"string\"\n//                         },\n//                         {\n//                             \"internalType\": \"string\",\n//                             \"name\": \"treatment\",\n//                             \"type\": \"string\"\n//                         },\n//                         {\n//                             \"internalType\": \"uint256\",\n//                             \"name\": \"timestamp\",\n//                             \"type\": \"uint256\"\n//                         }\n//                     ],\n//                     \"internalType\": \"struct HealthcareRecords.Record[]\",\n//                     \"name\": \"\",\n//                     \"type\": \"tuple[]\"\n//                 }\n//             ],\n//             \"stateMutability\": \"view\",\n//             \"type\": \"function\"\n//         }\n//     ];\n\n//     useEffect(() => {\n//         const connectWallet = async () => {\n//             try {\n//                 const provider = new ethers.providers.Web3Provider(window.ethereum);\n//                 await provider.send('eth_requestAccounts', []);\n//                 const signer = provider.getSigner();\n//                 setProvider(provider);\n//                 setSigner(signer);\n\n//                 const accountAddress = await signer.getAddress();\n//                 setAccount(accountAddress);\n\n//                 console.log(accountAddress);\n\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\n//                 setContract(contract);\n\n//                 const ownerAddress = await contract.getOwner();\n\n//                 setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\n\n//             } catch (error) {\n//                 console.error(\"Error connecting to wallet: \", error);\n//             }\n\n//         };\n//         connectWallet();\n\n//     }, []);\n\n//     const fetchPatientRecords = async () => {\n//         try {\n//             const records = await contract.getPatientRecords(patientID);\n//             console.log(records);\n//             setPatientRecords(records);\n\n//         } catch(error) {\n//             console.error(\"Error fetching patient records\", error);\n//         }\n//     }\n\n//     const addRecord = async () => {\n//         try {\n//             const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\n//             await tx.wait();\n//             fetchPatientRecords();\n//             await tx.wait();\n//             alert(`Provider ${providerAddress} authorized successfully`);\n\n//         } catch(error) {\n//             console.error(\"Error adding records\", error);\n//         }\n\n//     }\n\n//     const authorizeProvider = async () => {\n//         if (isOwner){\n//             try {\n//                 const tx = await contract.authorizeProvider(providerAddress);\n//                 await tx.wait();\n//                 alert(`Provider ${providerAddress} authorized successfully`);\n\n//             } catch(error) {\n//                 console.error(\"Only contract owner can authorize different providers\");\n//             }\n//         } else {\n//             alert(\"Only contract owner can call this function\");\n//         }\n//     }\n\n//     return(\n//         <div className='container'>\n//             <h1 className = \"title\">AptoMed <br></br> \"Empowering Patients with Secure, Blockchain-Powered Health Records\"</h1>\n//             {account && <p className='account-info'>Connected Account: {account}</p>}\n//             {isOwner && <p className='owner-info'>You are the contract owner</p>}\n\n//         <div className='form-section'>\n//             <h2>Fetch Patient Records</h2>\n//             <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\n//             <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\n//         </div>\n\n//         <div className=\"form-section\">\n//             <h2>Add Patient Record</h2>\n//             <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\n//             <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\n//             <button className='action-button' onClick={addRecord}>Add Records</button>\n\n//         </div>\n// <div className=\"form-section\">\n//     <h2>Authorize HealthCare Provider</h2>\n//     <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\n//     <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\n// </div>\n\n//         <div className='records-section'>\n//             <h2>Patient Records</h2>\n//             {patientRecords.map((record, index) => (\n//                 <div key = {index}>\n//                     <p>Record ID: {record.recordID.toNumber()}</p>\n//                     <p>Diagnosis: {record.diagnosis}</p>\n//                     <p>Treatment: {record.treatment}</p>\n//                     <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\n//             </div>\n//             ))}\n//         </div>\n\n//         </div>\n\n//     )\n\n// }\n\n// export default HealthCare;\n\nimport React, { useState, useEffect } from 'react';\nimport { AptosClient, FaucetClient, AptosAccount, HexString } from 'aptos';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new AptosClient(\"https://fullnode.devnet.aptoslabs.com\");\nconst faucetClient = new FaucetClient(\"https://faucet.devnet.aptoslabs.com\",\n// Faucet endpoint\n\"https://fullnode.devnet.aptoslabs.com\" // Full node endpoint\n);\nconst HealthCare = () => {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [patientID, setPatientID] = useState('');\n  const [diagnosis, setDiagnosis] = useState('');\n  const [treatment, setTreatment] = useState('');\n  const [transactionHash, setTransactionHash] = useState(null);\n  const [patientRecords, setPatientRecords] = useState([]);\n  useEffect(() => {\n    const createAccount = async () => {\n      // Create a new Aptos account\n      const aptosAccount = new AptosAccount();\n      setAccount(aptosAccount);\n\n      // Fund account using Faucet\n      await faucetClient.fundAccount(aptosAccount.address(), 100000000); // Fund with 100 APT\n\n      // Fetch the balance\n      const resources = await client.getAccountResources(aptosAccount.address());\n      const accountResource = resources.find(r => r.type === \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\");\n      setBalance(accountResource.data.coin.value);\n    };\n    createAccount();\n  }, []);\n  const addRecord = async () => {\n    try {\n      const payload = {\n        type: \"entry_function_payload\",\n        function: `${account.address()}::HealthcareRecords::add_record`,\n        arguments: [patientID, diagnosis, treatment],\n        type_arguments: []\n      };\n      const txnRequest = await client.generateTransaction(account.address(), payload);\n      const signedTxn = await client.signTransaction(account, txnRequest);\n      const transactionRes = await client.submitTransaction(signedTxn);\n      setTransactionHash(transactionRes.hash);\n      fetchPatientRecords(); // Fetch updated records after adding\n    } catch (error) {\n      console.error(\"Error adding record\", error);\n    }\n  };\n  const fetchPatientRecords = async () => {\n    try {\n      const data = await client.getAccountResources(account.address());\n      setPatientRecords(data); // Assuming that healthcare records are stored in account resources.\n    } catch (error) {\n      console.error(\"Error fetching patient records\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"AptoMed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), account && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Account Address: \", account.address().toString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 19\n    }, this), balance && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"account-info\",\n      children: [\"Account Balance: \", balance / 1000000, \" APT\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Fetch Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Enter Patient ID\",\n        value: patientID,\n        onChange: e => setPatientID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: fetchPatientRecords,\n        children: \"Fetch Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Patient Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Diagnosis\",\n        value: diagnosis,\n        onChange: e => setDiagnosis(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-field\",\n        type: \"text\",\n        placeholder: \"Treatment\",\n        value: treatment,\n        onChange: e => setTreatment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action-button\",\n        onClick: addRecord,\n        children: \"Add Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), transactionHash && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Transaction Hash: \", transactionHash]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"records-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Patient Records\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), patientRecords.map((record, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"record-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Record ID: \", record.data.recordID]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Diagnosis: \", record.data.diagnosis]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Treatment: \", record.data.treatment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Timestamp: \", new Date(record.data.timestamp * 1000).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 313,\n    columnNumber: 5\n  }, this);\n};\n_s(HealthCare, \"NrAv6yrll/yzgjT6/5XJdaiI5dg=\");\n_c = HealthCare;\nexport default HealthCare;\nvar _c;\n$RefreshReg$(_c, \"HealthCare\");","map":{"version":3,"names":["React","useState","useEffect","AptosClient","FaucetClient","AptosAccount","HexString","jsxDEV","_jsxDEV","client","faucetClient","HealthCare","_s","account","setAccount","balance","setBalance","patientID","setPatientID","diagnosis","setDiagnosis","treatment","setTreatment","transactionHash","setTransactionHash","patientRecords","setPatientRecords","createAccount","aptosAccount","fundAccount","address","resources","getAccountResources","accountResource","find","r","type","data","coin","value","addRecord","payload","function","arguments","type_arguments","txnRequest","generateTransaction","signedTxn","signTransaction","transactionRes","submitTransaction","hash","fetchPatientRecords","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toString","placeholder","onChange","e","target","onClick","map","record","index","recordID","Date","timestamp","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Sonam Kumari/OneDrive/Desktop/AptoMed/src/Healthcare.js"],"sourcesContent":["// import React, {useState, useEffect} from 'react';\r\n// import {ethers} from 'ethers';\r\n\r\n// const HealthCare = () => {\r\n//     const [provider, setProvider] = useState(null);\r\n//     const [signer, setSigner] = useState(null);\r\n//     const [contract, setContract] = useState(null);\r\n//     const [account, setAccount] = useState(null);\r\n//     const [isOwner, setIsOwner] = useState(null);\r\n//     const [patientID, setPatientID] = useState('');\r\n//     const [diagnosis, setDiagnosis] = useState('');\r\n//     const [treatment, setTreatment] = useState('');\r\n//     const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n\r\n//     const [providerAddress, setProviderAddress] = useState(\"\");\r\n//     const contractAddress = \"0x6348995a1972d426b6a7c053fd17a86b243c9d2b\";\r\n\r\n//     const contractABI = [\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"constructor\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"patientID\",\r\n//                     \"type\": \"uint256\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"string\",\r\n//                     \"name\": \"patientName\",\r\n//                     \"type\": \"string\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"string\",\r\n//                     \"name\": \"diagnosis\",\r\n//                     \"type\": \"string\"\r\n//                 },\r\n//                 {\r\n//                     \"internalType\": \"string\",\r\n//                     \"name\": \"treatment\",\r\n//                     \"type\": \"string\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"addRecord\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"provider\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"authorizeProvider\",\r\n//             \"outputs\": [],\r\n//             \"stateMutability\": \"nonpayable\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [],\r\n//             \"name\": \"getOwner\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"internalType\": \"address\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"address\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         },\r\n//         {\r\n//             \"inputs\": [\r\n//                 {\r\n//                     \"internalType\": \"uint256\",\r\n//                     \"name\": \"patientID\",\r\n//                     \"type\": \"uint256\"\r\n//                 }\r\n//             ],\r\n//             \"name\": \"getPatientRecords\",\r\n//             \"outputs\": [\r\n//                 {\r\n//                     \"components\": [\r\n//                         {\r\n//                             \"internalType\": \"uint256\",\r\n//                             \"name\": \"recordID\",\r\n//                             \"type\": \"uint256\"\r\n//                         },\r\n//                         {\r\n//                             \"internalType\": \"string\",\r\n//                             \"name\": \"patientName\",\r\n//                             \"type\": \"string\"\r\n//                         },\r\n//                         {\r\n//                             \"internalType\": \"string\",\r\n//                             \"name\": \"diagnosis\",\r\n//                             \"type\": \"string\"\r\n//                         },\r\n//                         {\r\n//                             \"internalType\": \"string\",\r\n//                             \"name\": \"treatment\",\r\n//                             \"type\": \"string\"\r\n//                         },\r\n//                         {\r\n//                             \"internalType\": \"uint256\",\r\n//                             \"name\": \"timestamp\",\r\n//                             \"type\": \"uint256\"\r\n//                         }\r\n//                     ],\r\n//                     \"internalType\": \"struct HealthcareRecords.Record[]\",\r\n//                     \"name\": \"\",\r\n//                     \"type\": \"tuple[]\"\r\n//                 }\r\n//             ],\r\n//             \"stateMutability\": \"view\",\r\n//             \"type\": \"function\"\r\n//         }\r\n//     ];\r\n\r\n//     useEffect(() => {\r\n//         const connectWallet = async () => {\r\n//             try {\r\n//                 const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n//                 await provider.send('eth_requestAccounts', []);\r\n//                 const signer = provider.getSigner();\r\n//                 setProvider(provider);\r\n//                 setSigner(signer);\r\n\r\n//                 const accountAddress = await signer.getAddress();\r\n//                 setAccount(accountAddress);\r\n\r\n//                 console.log(accountAddress);\r\n\r\n//                 const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n//                 setContract(contract);\r\n\r\n//                 const ownerAddress = await contract.getOwner();\r\n\r\n//                 setIsOwner(accountAddress.toLowerCase() === ownerAddress.toLowerCase());\r\n\r\n               \r\n\r\n//             } catch (error) {\r\n//                 console.error(\"Error connecting to wallet: \", error);\r\n//             }\r\n\r\n//         };\r\n//         connectWallet();\r\n\r\n//     }, []);\r\n\r\n\r\n//     const fetchPatientRecords = async () => {\r\n//         try {\r\n//             const records = await contract.getPatientRecords(patientID);\r\n//             console.log(records);\r\n//             setPatientRecords(records);\r\n\r\n//         } catch(error) {\r\n//             console.error(\"Error fetching patient records\", error);\r\n//         }\r\n//     }\r\n\r\n//     const addRecord = async () => {\r\n//         try {\r\n//             const tx = await contract.addRecord(patientID, \"Alice\", diagnosis, treatment);\r\n//             await tx.wait();\r\n//             fetchPatientRecords();\r\n//             await tx.wait();\r\n//             alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n//         } catch(error) {\r\n//             console.error(\"Error adding records\", error);\r\n//         }\r\n\r\n//     }\r\n\r\n\r\n//     const authorizeProvider = async () => {\r\n//         if (isOwner){\r\n//             try {\r\n//                 const tx = await contract.authorizeProvider(providerAddress);\r\n//                 await tx.wait();\r\n//                 alert(`Provider ${providerAddress} authorized successfully`);\r\n\r\n//             } catch(error) {\r\n//                 console.error(\"Only contract owner can authorize different providers\");\r\n//             }\r\n//         } else {\r\n//             alert(\"Only contract owner can call this function\");\r\n//         }\r\n//     }\r\n\r\n//     return(\r\n//         <div className='container'>\r\n//             <h1 className = \"title\">AptoMed <br></br> \"Empowering Patients with Secure, Blockchain-Powered Health Records\"</h1>\r\n//             {account && <p className='account-info'>Connected Account: {account}</p>}\r\n//             {isOwner && <p className='owner-info'>You are the contract owner</p>}\r\n\r\n//         <div className='form-section'>\r\n//             <h2>Fetch Patient Records</h2>\r\n//             <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)}/>\r\n//             <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n//         </div>\r\n\r\n//         <div className=\"form-section\">\r\n//             <h2>Add Patient Record</h2>\r\n//             <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)}/>\r\n//             <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)}/>\r\n//             <button className='action-button' onClick={addRecord}>Add Records</button>\r\n\r\n//         </div>\r\n        // <div className=\"form-section\">\r\n        //     <h2>Authorize HealthCare Provider</h2>\r\n        //     <input className='input-field' type= \"text\" placeholder='Provider Address' value = {providerAddress} onChange={(e) => setProviderAddress(e.target.value)}/>\r\n        //     <button className='action-button' onClick={authorizeProvider}>Authorize Provider</button>\r\n        // </div>\r\n\r\n//         <div className='records-section'>\r\n//             <h2>Patient Records</h2>\r\n//             {patientRecords.map((record, index) => (\r\n//                 <div key = {index}>\r\n//                     <p>Record ID: {record.recordID.toNumber()}</p>\r\n//                     <p>Diagnosis: {record.diagnosis}</p>\r\n//                     <p>Treatment: {record.treatment}</p>\r\n//                     <p>Timestamp: {new Date(record.timestamp.toNumber() * 1000).toLocaleString()}</p>\r\n//             </div>\r\n//             ))}\r\n//         </div>\r\n\r\n//         </div>\r\n\r\n//     )\r\n\r\n// }\r\n\r\n// export default HealthCare;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { AptosClient, FaucetClient, AptosAccount, HexString } from 'aptos';\r\n\r\nconst client = new AptosClient(\"https://fullnode.devnet.aptoslabs.com\");\r\nconst faucetClient = new FaucetClient(\r\n  \"https://faucet.devnet.aptoslabs.com\", // Faucet endpoint\r\n  \"https://fullnode.devnet.aptoslabs.com\" // Full node endpoint\r\n);\r\n\r\nconst HealthCare = () => {\r\n  const [account, setAccount] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [patientID, setPatientID] = useState('');\r\n  const [diagnosis, setDiagnosis] = useState('');\r\n  const [treatment, setTreatment] = useState('');\r\n  const [transactionHash, setTransactionHash] = useState(null);\r\n  const [patientRecords, setPatientRecords] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const createAccount = async () => {\r\n      // Create a new Aptos account\r\n      const aptosAccount = new AptosAccount();\r\n      setAccount(aptosAccount);\r\n\r\n      // Fund account using Faucet\r\n      await faucetClient.fundAccount(aptosAccount.address(), 100_000_000); // Fund with 100 APT\r\n\r\n      // Fetch the balance\r\n      const resources = await client.getAccountResources(aptosAccount.address());\r\n      const accountResource = resources.find((r) => r.type === \"0x1::coin::CoinStore<0x1::aptos_coin::AptosCoin>\");\r\n      setBalance(accountResource.data.coin.value);\r\n    };\r\n\r\n    createAccount();\r\n  }, []);\r\n\r\n  const addRecord = async () => {\r\n    try {\r\n      const payload = {\r\n        type: \"entry_function_payload\",\r\n        function: `${account.address()}::HealthcareRecords::add_record`,\r\n        arguments: [patientID, diagnosis, treatment],\r\n        type_arguments: [],\r\n      };\r\n\r\n      const txnRequest = await client.generateTransaction(account.address(), payload);\r\n      const signedTxn = await client.signTransaction(account, txnRequest);\r\n      const transactionRes = await client.submitTransaction(signedTxn);\r\n\r\n      setTransactionHash(transactionRes.hash);\r\n      fetchPatientRecords(); // Fetch updated records after adding\r\n    } catch (error) {\r\n      console.error(\"Error adding record\", error);\r\n    }\r\n  };\r\n\r\n  const fetchPatientRecords = async () => {\r\n    try {\r\n      const data = await client.getAccountResources(account.address());\r\n      setPatientRecords(data); // Assuming that healthcare records are stored in account resources.\r\n    } catch (error) {\r\n      console.error(\"Error fetching patient records\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1 className=\"title\">AptoMed</h1>\r\n      {account && <p className='account-info'>Account Address: {account.address().toString()}</p>}\r\n      {balance && <p className='account-info'>Account Balance: {balance / 1000000} APT</p>}\r\n\r\n      <div className='form-section'>\r\n        <h2>Fetch Patient Records</h2>\r\n        <input className='input-field' type='text' placeholder='Enter Patient ID' value={patientID} onChange={(e) => setPatientID(e.target.value)} />\r\n        <button className='action-button' onClick={fetchPatientRecords}>Fetch Records</button>\r\n      </div>\r\n\r\n      <div className=\"form-section\">\r\n        <h2>Add Patient Record</h2>\r\n        <input className='input-field' type='text' placeholder='Diagnosis' value={diagnosis} onChange={(e) => setDiagnosis(e.target.value)} />\r\n        <input className='input-field' type='text' placeholder='Treatment' value={treatment} onChange={(e) => setTreatment(e.target.value)} />\r\n        <button className='action-button' onClick={addRecord}>Add Record</button>\r\n      </div>\r\n\r\n      {transactionHash && (\r\n        <p>Transaction Hash: {transactionHash}</p>\r\n      )}\r\n\r\n      <div className='records-section'>\r\n        <h2>Patient Records</h2>\r\n        {patientRecords.map((record, index) => (\r\n          <div key={index} className='record-card'>\r\n            <p>Record ID: {record.data.recordID}</p>\r\n            <p>Diagnosis: {record.data.diagnosis}</p>\r\n            <p>Treatment: {record.data.treatment}</p>\r\n            <p>Timestamp: {new Date(record.data.timestamp * 1000).toLocaleString()}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HealthCare;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACQ;AACA;AACA;AACA;AACA;;AAER;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,YAAY,EAAEC,YAAY,EAAEC,SAAS,QAAQ,OAAO;AAAC,S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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}